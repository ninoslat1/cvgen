---
export const prerender = true;

export async function getStaticPaths() {
  return [
    { params: { lang: "en" } },
    { params: { lang: "id" } },
  ];
}

import Layout from '../../layouts/Layout.astro';
import "@/styles/globals.css";
import { getLocaleFromLang } from "@/utils/getLocale";
import Footer from '@/components/Footer.astro';
import CTA from '@/components/CTA.astro';
import Feature from '@/components/Feature.astro';
import Hero from '@/components/Hero.astro';
import Step from '@/components/Step.astro';

const { lang } = Astro.params;
const locale = await getLocaleFromLang(lang);
---

<Layout lang={lang} locale={locale}>
  <Hero server:defer locale={locale}/>
  <Feature server:defer locale={locale}/>
  <Step server:defer locale={locale}/>
  <CTA server:defer locale={locale}/>
  <Footer server:defer locale={locale}/>
</Layout>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>
